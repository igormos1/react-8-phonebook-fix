{"version":3,"file":"static/js/476.305e32de.chunk.js","mappings":"uTAaMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,0CAC5BC,OAAQJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIH,SAAS,oDAIlCI,EAAc,SAAC,GAC0B,IAAD,IADvBC,cAAAA,OACuB,MADP,CAC5CN,KAAM,GAAIE,OAAQ,IAAiC,EAA3BK,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAG5BC,EAAY,mCAAG,WAAOC,EAAP,6EAAiBC,EAAjB,EAAiBA,WAC/BC,EAASC,MAAK,SAAAC,GAAO,OAAIA,EAAQd,KAAKe,sBAAwBL,EAAOV,KAAKe,uBAD5D,uBAEhBC,EAAAA,GAAAA,MAAA,UAAeN,EAAOV,KAAtB,4BAFgB,0CAKbO,EAASG,GALI,OAMnBC,IANmB,2CAAH,wDASZM,GAASC,EAAAA,EAAAA,IAAU,CACvBZ,cAAeA,EACfa,iBAAkBtB,EAClBU,SAAUE,IAGNW,GAAKC,EAAAA,EAAAA,SAEGT,GAAaU,EAAAA,EAAAA,MAAnBC,KAGR,OAEE,0BACE,kBAAMhB,SAAUU,EAAOR,aACrBe,aAAa,MADf,WAEE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTX,GAAE,UAAKA,EAAL,SACFY,KAAK,OACLhC,KAAK,OACLiC,MAAM,OACNC,MAAOjB,EAAOP,OAAOV,KACrBmC,SAAUlB,EAAOmB,aACjBC,MAAOpB,EAAOqB,QAAQtC,MAAQuC,QAAQtB,EAAOuB,OAAOxC,MACpDyC,WAAYxB,EAAOqB,QAAQtC,MAAQiB,EAAOuB,OAAOxC,UAGrD,SAACyB,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTX,GAAE,UAAKA,EAAL,WACFY,KAAK,MACLhC,KAAK,SACLiC,MAAM,SACNC,MAAOjB,EAAOP,OAAOR,OACrBiC,SAAUlB,EAAOmB,aACjBC,MAAOpB,EAAOqB,QAAQpC,QAAUqC,QAAQtB,EAAOuB,OAAOtC,QACtDuC,WAAYxB,EAAOqB,QAAQpC,QAAUe,EAAOuB,OAAOtC,eAIzD,SAACwC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYb,WAAS,EAACc,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAAKf,KAAK,SAAjF,SACGxB,UCvEEwC,EAAgB,WAE3B,OAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eAEMC,EAAgB,mCAAG,WAAOzC,GAAP,0FAEfwC,EAAWxC,GAFI,OAGrBM,EAAAA,GAAAA,QAAA,mBAA0BN,EAAOV,KAAjC,gBAHqB,gDAKrBgB,EAAAA,GAAAA,MAAY,gCACZoC,QAAQC,IAAR,MANqB,yDAAH,sDAUtB,OACE,+BACE,SAAChD,EAAD,CAAaE,SAAU4C,EAAkB3C,WAAW,mB,qECrB1D,EAA0B,uBAA1B,EAAyD,qBAAzD,EAAyF,wBAAzF,EAAwH,oBCSlH8C,EAAYC,SAASC,cAAc,eAE5BC,EAAQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,QAAStC,EAAS,EAATA,GAEfR,GAAaU,EAAAA,EAAAA,MAAnBC,KACR,GAAiCoC,EAAAA,EAAAA,MAAjC,eAAOC,EAAP,KAAuBC,EAAvB,KAEM/C,EAAUF,EAASC,MAAK,SAAAC,GAAO,OAAIA,EAAQM,KAAOA,MAKxD0C,EAAAA,EAAAA,YAAU,WAGN,OAFAC,OAAOC,iBAAiB,UAAWC,GAE5B,WACHF,OAAOG,oBAAoB,UAAWD,OAK9C,IAAMA,EAAgB,SAAAE,GACH,WAAXA,EAAEC,MACFV,KAWFW,EAAmB,mCAAG,WAAMC,GAAN,0FAEdV,GAAe,QAAExC,GAAIN,EAAQM,IAAOkD,IAFtB,OAGpBZ,IAHoB,+CAMpBN,QAAQC,IAAR,MANoB,wDAAH,sDAmBzB,OATAS,EAAAA,EAAAA,YAAU,WACFD,EAAOU,WACPvD,EAAAA,GAAAA,QAAA,uBAIL,CAAC6C,EAAOU,aAGJC,EAAAA,EAAAA,eACH,gBAAKC,UAAWC,EACZC,QA3BoB,SAAAR,GACpBA,EAAES,gBAAkBT,EAAEU,QACtBnB,KAwBJ,UAEI,iBAAKe,UAAWC,EAAhB,UACK9D,IACG,mBACI+D,QAASjB,EACT1B,KAAK,SACLyC,UAAWC,EAHf,UAG2B,SAAC,MAAD,CAASD,UAAWC,MAElD9D,IACG,SAACP,EAAD,CACIC,cAAe,CAAEN,KAAMc,EAAQd,KAAME,OAAQY,EAAQZ,QACrDK,SAAU8D,EACV7D,WAAW,cAI3B8C,IChFR,EAAuB,8BAAvB,EAAmG,gCCWtFwB,EAAkB,SAAC,GAA0B,IAAxB1D,EAAuB,EAAvBA,GAAIpB,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAExC,GAAgC6E,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAsBnB,EAAtB,KACA,GAAkCoB,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,WAChBD,GAAcD,IAclB,OATApB,EAAAA,EAAAA,YAAU,WACFD,EAAOU,WACPvD,EAAAA,GAAAA,QAAA,yBAIL,CAAC6C,EAAOU,aAIP,gBAAIE,UAAWC,EAAf,UAAwB1E,EAAxB,KAAgCE,GAC5B,UAACmF,EAAA,EAAD,CAAKxC,GAAI,CAAE,kBAAmB,CAAEyC,EAAG,IAAnC,WACI,SAAC5C,EAAA,EAAD,CACIV,KAAK,SACLW,MAAM,UACN,aAAW,OACXgC,QAlBQ,kBAAMK,EAAc5D,IAmB5BmE,SAAU1B,EAAO2B,UACjB5C,QAAQ,YACR6C,KAAK,QACLhB,UAAWC,EARf,UAUI,SAACgB,EAAA,EAAD,OAGJ,SAAChD,EAAA,EAAD,CACIV,KAAK,SACLW,MAAM,UACN,aAAW,SACX8B,UAAWC,EACXC,QAASS,EACTxC,QAAQ,YACR6C,KAAK,QAPT,UASI,SAACE,EAAA,EAAD,SAGPT,IACG,SAACzB,EAAD,CACIC,QAAS0B,EACThE,GAAIA,QC9DxB,EAAuB,0BAAvB,EAA2D,6BCM9CwE,EAAc,WACvB,OAAuCtE,EAAAA,EAAAA,MAAzBV,EAAd,EAAQW,KAAgBsE,EAAxB,EAAwBA,WAGlBC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,UAGpCG,EAAgB,OAAGrF,QAAH,IAAGA,OAAH,EAAGA,EAAUkF,QAAO,SAAAhF,GAAO,OAC7CA,EAAQd,KAAKe,oBAAoBmF,SAASJ,EAAO/E,wBAGrD,OACI,gCACKH,EAAWiF,GAAa,cAAGpB,UAAWC,EAAd,yBACzB,eAAID,UAAWC,EAAf,SACK9D,GAAYqF,EAAiBE,KAAI,YAA2B,IAAxB/E,EAAuB,EAAvBA,GAAIpB,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC3C,OACI,SAAC4E,EAAD,CAEI1D,GAAIA,EACJpB,KAAMA,EACNE,OAAQA,GAHHkB,Y,UCfpBgF,EAAS,WAEtB,IAAMhF,GAAKC,EAAAA,EAAAA,SACLyE,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,UACpCO,GAAWC,EAAAA,EAAAA,MAIf,OACE,SAACjB,EAAA,EAAD,CACEkB,UAAU,OACV1D,GAAI,CACF,kBAAmB,CAAEyC,EAAG,EAAGkB,MAAO,SAEpCC,YAAU,EACVjF,aAAa,MANf,UAQE,SAACM,EAAA,EAAD,CAAWV,GAAE,UAAKA,EAAL,WACXa,MAAM,wBACNW,QAAQ,WACRZ,KAAK,SACLE,MAAO4D,EACP3D,SAhBmB,SAACuE,GAAD,OAAWL,GAASM,EAAAA,EAAAA,GAAaD,EAAM9B,cAAc1C,cCfhF,EAA4B,gCAA5B,EAAoE,4BAApE,EAA2G,+BCK5F,SAAS0E,IAEpB,OACI,iBAAKnC,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,6BACA,SAAC1B,EAAD,KACA,eAAIyB,UAAWC,EAAf,uBACA,SAAC0B,EAAD,KACA,SAACR,EAAD","sources":["components/ContactForm/ContactForm.jsx","components/CreateContact/CreateContact.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Grid } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport { useId } from \"react\";\n\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(\"enter a name, this is a required field\"),\n  number: yup.string().min(8).max(13).required(\"enter a phone number, this is a required field\"),\n});\n\n\nexport const ContactForm = ({ initialValues = {\n  name: '', number: '',}, onSubmit, buttonText }) => {\n    \n  \n  const handleSubmit = async (values, { resetForm }) => {\n     if (contacts.find(contact => contact.name.toLocaleLowerCase() === values.name.toLocaleLowerCase())){\n       toast.error(`${values.name} is already in contacts`)\n        return\n     }\n    await onSubmit(values);\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n  \n  const id = useId();\n  \n  const { data: contacts } = useGetContactsQuery();\n\n\n  return (\n\n    <div>\n      <form onSubmit={formik.handleSubmit}\n        autoComplete=\"off\">\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              id={`${id}-name`}\n              type=\"text\"\n              name=\"name\"\n              label=\"Name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              id={`${id}-number`}\n              type=\"tel\"\n              name=\"number\"\n              label=\"Number\"\n              value={formik.values.number}\n              onChange={formik.handleChange}\n              error={formik.touched.number && Boolean(formik.errors.number)}\n              helperText={formik.touched.number && formik.errors.number}\n            />\n          </Grid>\n        </Grid>\n        <Button color=\"primary\" variant=\"contained\" fullWidth sx={{ mt: 3, mb: 2 }} type=\"submit\">\n          {buttonText}\n        </Button>\n      </form>\n    </div>\n  );\n  \n}\n\nContactForm.propTypes = {\n  initialValues: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  buttonText: PropTypes.string.isRequired,\n\n};\n\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import { useId } from \"react\";\n// import * as yup from 'yup';\n\n// import toast from 'react-hot-toast';\n// import PropTypes from 'prop-types';\n\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n// import s from \"./ContactForm.module.css\";\n\n// const schema = yup.object().shape({\n//   name: yup.string().required(\"enter a name, this is a required field\"),\n//   number: yup.string().min(8).max(13).required(\"enter a phone number, this is a required field\"),\n// });\n\n\n// export const ContactForm = ({ initialValues = {\n//   name: '', number: '',}, onSubmit, buttonText }) => {\n      \n//     const id = useId();\n  \n//   const { data: contacts } = useGetContactsQuery();\n\n\n//   const handleSubmit = async (values, { resetForm }) => {\n//      if (contacts.find(contact => contact.name.toLocaleLowerCase() === values.name.toLocaleLowerCase())){\n//        toast.error(`${values.name} is already in contacts`)\n//         return\n//      }\n//     await onSubmit(values);\n//     resetForm();\n//   };\n\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}>\n//       <Form className={s.form} autoComplete='off'>\n//         <label htmlFor={`${id}-name`} className={s.label}>Name</label>\n//         <Field\n//           className={s.input}\n//           type=\"text\"\n//           name=\"name\"\n//           id={`${id}-name`}\n//         />\n//         <ErrorMessage className={s.error} name=\"name\" component=\"div\" />\n//         <label htmlFor={`${id}-number`} className={s.label}>Number</label>\n//         <Field\n//           className={s.input}\n//           type=\"tel\"\n//           name=\"number\"\n//           id={`${id}-number`}\n//         />\n//         <ErrorMessage className={s.error} name=\"number\" component=\"div\" />\n//         <button className={s.button} type='submit'>{buttonText}</button>\n//       </Form>\n//     </Formik>\n//   );\n  \n// }\n\n// ContactForm.propTypes = {\n//   initialValues: PropTypes.shape({\n//     name: PropTypes.string.isRequired,\n//     number: PropTypes.string.isRequired,\n//   }),\n//   onSubmit: PropTypes.func.isRequired,\n//   buttonText: PropTypes.string.isRequired,\n\n// };","import toast from 'react-hot-toast';\n\nimport { useAddContactMutation } from 'redux/contacts/contactsSlice.js';\nimport { ContactForm } from \"components/ContactForm/ContactForm.jsx\";\n\n\nexport const CreateContact = () => {\n\n  const [addContact] = useAddContactMutation();\n    \n  const handleAddContact = async (values) => {\n    try {\n      await addContact(values);\n      toast.success(`contact \"${values.name}\" was saved`)\n    } catch (error) {\n      toast.error('error, contact was not saved')\n      console.log(error)\n    }\n  };\n    \n  return (\n    <>\n      <ContactForm onSubmit={handleAddContact} buttonText='Add contact' />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\",\"btnClose\":\"Modal_btnClose__oHdcJ\",\"icon\":\"Modal_icon__2UpwH\"};","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport toast from \"react-hot-toast\";\nimport { MdClose } from \"react-icons/md\";\n\nimport { useGetContactsQuery, useUpdateContactMutation } from \"redux/contacts/contactsSlice.js\";\nimport { ContactForm } from \"components/ContactForm/ContactForm.jsx\";\nimport s from \"./Modal.module.css\";\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onClose, id }) => {\n    \n    const { data: contacts } = useGetContactsQuery();\n    const [updateMaterial, result] = useUpdateContactMutation();\n\n    const contact = contacts.find(contact => contact.id === id);\n\n    \n    \n    \n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n    \n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n        }\n    });\n\n    \n    const handleKeyDown = e => {\n        if (e.code === 'Escape') {\n            onClose();\n        }\n    };\n    \n\n    const handleBackdropClick = e => {\n        if (e.currentTarget === e.target) {\n            onClose();\n        }\n    };\n\n    const handleUpdateContact = async fields => {\n        try {\n            await updateMaterial({ id: contact.id, ...fields })\n            onClose();\n        }\n        catch (error) {\n            console.log(error)\n        }\n    };\n\n    useEffect(() => {\n        if (result.isSuccess) {\n            toast.success(`changes was saved`);\n        }\n        return\n      \n    }, [result.isSuccess]);\n\n\n    return createPortal(\n        <div className={s.Overlay}\n            onClick={handleBackdropClick}>\n            <div className={s.Modal}>\n                {contacts && (\n                    <button\n                        onClick={onClose}\n                        type=\"button\"\n                        className={s.btnClose}><MdClose className={s.icon} /></button>\n                )}\n                {contacts && (\n                    <ContactForm\n                        initialValues={{ name: contact.name, number: contact.number }}\n                        onSubmit={handleUpdateContact}\n                        buttonText='Save' />\n                )}\n            </div>\n        </div>,\n        modalRoot\n    );\n}\n\n\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"icon\":\"ContactListItem_icon__44oEf\",\"button\":\"ContactListItem_button__SG6H2\"};","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { Button } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n\nimport { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\nimport { Modal } from 'components/Modal/Modal.jsx';\nimport s from \"./ContactListItem.module.css\";\n\nexport const ContactListItem = ({ id, name, number }) => {\n\n    const [deleteContact, result] = useDeleteContactMutation();\n    const [showModal, setShowModal] = useState(false);\n\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n    \n    const onDeleteContact = () => deleteContact(id);\n\n    useEffect(() => {\n        if (result.isSuccess) {\n            toast.success(`contact was deleted`);\n        }\n        return\n      \n    }, [result.isSuccess]);\n    \n\n    return (\n        <li className={s.item}>{name}: {number}\n            <Box sx={{ '& > :not(style)': { m: 1 } }}>\n                <Button\n                    type=\"button\"\n                    color=\"primary\"\n                    aria-label=\"edit\"\n                    onClick={onDeleteContact}\n                    disabled={result.isLoading}\n                    variant=\"contained\"\n                    size=\"small\"\n                    className={s.button}\n                >\n                    <DeleteOutlinedIcon />\n                </Button>\n             \n                <Button\n                    type=\"button\"\n                    color=\"primary\"\n                    aria-label=\"delete\"\n                    className={s.button}\n                    onClick={toggleModal}\n                    variant=\"contained\"\n                    size=\"small\"\n                >\n                    <EditIcon />\n                </Button>\n            </Box>\n            {showModal &&\n                <Modal\n                    onClose={toggleModal}\n                    id={id}\n                />}\n        </li>\n    );\n}\n\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"loading\":\"ContactList_loading__QJfkF\"};","import { useSelector } from 'react-redux';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\nimport s from './ContactList.module.css';\n\nexport const ContactList = () => {\n    const { data: contacts, isFetching } = useGetContactsQuery();\n   \n    \n    const filter = useSelector(state => state.filter);\n\n    \n    const filteredContacts = contacts?.filter(contact =>\n        contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()));\n    \n\n    return (\n        <>\n            {contacts ? isFetching : <p className={s.loading}>Loading...</p>}\n            <ul className={s.list}>\n                {contacts && filteredContacts.map(({ id, name, number }) => {\n                    return (\n                        <ContactListItem\n                            key={id}\n                            id={id}\n                            name={name}\n                            number={number}\n                        />\n                    )\n                })}\n            </ul>\n        </>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n// import { useSelector } from 'react-redux';\n// import { createSelector } from '@reduxjs/toolkit';\n// import { useMemo } from 'react';\n\n// import { ContactListItem } from 'components/ContactListItem/ContactListItem.jsx';\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\n// import s from './ContactList.module.css';\n\n// export const ContactList = () => {\n\n    \n//     const filter = useSelector(state => state.filter);\n\n//     const selectFilteredContacts = useMemo(() => {\n//         return createSelector(\n//             [response => response.data, (_, filter) => filter],\n//             (contacts, filter) => {\n//                 return (\n//                     contacts?.filter(contact =>\n//                         contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n//                     ) ?? []\n//                 );\n//             }\n//         );\n//     }, []);\n\n//     const { filteredContacts, isFetching } = useGetContactsQuery(\n//         undefined,\n//         {\n//             selectFromResult(result) {\n//                 return {\n//                     ...result,\n//                     filteredContacts: selectFilteredContacts(result, filter),\n//                 }\n//             }\n//         }\n//     );\n    \n\n//     return (\n//         <>\n//             {filteredContacts ? isFetching : <p className={s.loading}>Loading...</p>}\n//             <ul>\n//                 {filteredContacts && filteredContacts.map(({ id, name, number }) => {\n//                     return (\n//                         <ContactListItem\n//                             key={id}\n//                             id={id}\n//                             name={name}\n//                             number={number}\n//                         />\n//                     )\n//                 })}\n//             </ul>\n//         </>\n//     );\n// }","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useId } from \"react\";\n\nimport { changeFilter } from \"redux/contacts/filterSlice\";\n\nexport const Filter = () => {\n    \nconst id = useId();\nconst filter = useSelector(state => state.filter);\nconst dispatch = useDispatch();\n\n    const onChangeFilter = (event) => dispatch(changeFilter(event.currentTarget.value));\n    \n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1, width: '100%' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField id={`${id}-filter`}\n        label=\"Find contacts by name\"\n        variant=\"outlined\"\n        type=\"search\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </Box>\n  );\n}\n\n\n\n\n\n// import { useId } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n\n// import { changeFilter } from \"redux/contacts/filterSlice\";\n// import s from \"./Filter.module.css\";\n\n\n// export const Filter = () => {\n\n// const id = useId();\n// const filter = useSelector(state => state.filter);\n// const dispatch = useDispatch();\n\n// const onChangeFilter = (event) => dispatch(changeFilter(event.currentTarget.value));\n\n//     return (\n//         <div className={s.filter}>\n//             <label htmlFor={`${id}-filter`} className={s.label}>Find contacts by name</label>\n//             <input className={s.input} type=\"search\"\n//                 id={`${id}-filter`}\n//                 value={filter}\n//                 onChange={onChangeFilter}\n//             />\n//         </div>\n\n//     );\n// }\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\",\"title\":\"ContactsPage_title__P3MkR\",\"subtitle\":\"ContactsPage_subtitle__jdL5x\"};","import { CreateContact } from \"components/CreateContact/CreateContact.jsx\";\nimport { ContactList } from \"components/ContactList/ContactList.jsx\";\nimport { Filter } from \"components/Filter/Filter.jsx\";\n\nimport s from \"./ContactsPage.module.css\";\n\nexport default function ContactsPage() {\n\n    return (\n        <div className={s.container}>\n            <h1 className={s.title}>Create contact</h1>\n            <CreateContact />\n            <h2 className={s.subtitle}>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </div>\n    );\n}"],"names":["schema","yup","shape","name","required","number","min","max","ContactForm","initialValues","onSubmit","buttonText","handleSubmit","values","resetForm","contacts","find","contact","toLocaleLowerCase","toast","formik","useFormik","validationSchema","id","useId","useGetContactsQuery","data","autoComplete","Grid","container","spacing","item","xs","TextField","fullWidth","type","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","color","variant","sx","mt","mb","CreateContact","useAddContactMutation","addContact","handleAddContact","console","log","modalRoot","document","querySelector","Modal","onClose","useUpdateContactMutation","updateMaterial","result","useEffect","window","addEventListener","handleKeyDown","removeEventListener","e","code","handleUpdateContact","fields","isSuccess","createPortal","className","s","onClick","currentTarget","target","ContactListItem","useDeleteContactMutation","deleteContact","useState","showModal","setShowModal","toggleModal","Box","m","disabled","isLoading","size","DeleteOutlined","Edit","ContactList","isFetching","filter","useSelector","state","filteredContacts","includes","map","Filter","dispatch","useDispatch","component","width","noValidate","event","changeFilter","ContactsPage"],"sourceRoot":""}